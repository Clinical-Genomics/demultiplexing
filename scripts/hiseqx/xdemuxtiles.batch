#!/bin/bash
#SBATCH -t 1-24:00:00
#SBATCH -c 16
#SBATCH -A prod001
#SBATCH -J Xdem
#SBATCH --output=/mnt/hds/proj/bioinfo/LOG/xdem-%j.out
#SBATCH --error=/mnt/hds/proj/bioinfo/LOG/xdem-%j.err
#SBATCH --mail-type=END
#SBATCH --mail-user=kenny.billiau@scilifelab.se

##########
# PARAMS #
##########

INDIR=$1 # Run dir
OUTDIR=$2 # Demux dir
LANE=$3 # 1-8
TILES=(${@:4}) # remaining args are the tile identifiers: 11 12 21 22

#############
# FUNCTIONS #
#############

log() {
    NOW=$(date +"%Y%m%d%H%M%S")
    echo [${NOW}] $@
}

########
# INIT #
########

log "starting, will use ${TMPDIR}"
log "INDIR: ${INDIR}"
log "OUTDIR: ${OUTDIR}"
log "LANE: ${LANE}"
log "TILES: ${TILES[@]}"

# log the version
bcl2fastq --version 2>&1

# set us up
TMPOUT_DIR=${TMPDIR}/Xout
CP_COMPLETE_DIR=${OUTDIR}/copycomplete/
CP_BACK_COMPLETE_DIR=${OUTDIR}/copybackcomplete/
mkdir -p ${TMPOUT_DIR}
mkdir -p ${CP_COMPLETE_DIR}
mkdir -p ${CP_BACK_COMPLETE_DIR}

#########
# CP IN #
#########

log "start copying"
for TILE in ${TILES[@]}; do
    cp --parent ${INDIR}/Data/Intensities/BaseCalls/L00${LANE}/*/s_${LANE}_${TILE}* ${TMPDIR}/
    cp --parent ${INDIR}/Data/Intensities/BaseCalls/L00${LANE}/s_${LANE}_${TILE}* ${TMPDIR}/
done
cp --parent ${INDIR}/Data/Intensities/s.locs ${TMPDIR}/
cp --parent ${INDIR}/RunInfo.xml ${TMPDIR}/
cp --parent ${INDIR}/SampleSheet.csv ${TMPDIR}/
cp --parent ${INDIR}/runParameters.xml ${TMPDIR}/

# we finished copying, let the pipeline know
touch ${CP_COMPLETE_DIR}/l${LANE}t${TILES[0]}

RUNDIR=${TMPDIR}/${INDIR}

#########
# DEMUX #
#########

# Get the index length from the sample sheet
# This assumes a lane is on line nr + 2 (2 headers)
SAMPLE_INDEX=( $(cat ${RUNDIR}/SampleSheet.csv | sed -n "$(( ${LANE} + 2 ))p" | sed -e 's/,/\n/g' ) )
SAMPLE_INDEX=( $( echo ${SAMPLE_INDEX[4]} | sed -e 's/-/\n/g' ) )
LEN_SAMPLE_INDEX1=${#SAMPLE_INDEX[0]}
LEN_SAMPLE_INDEX2=${#SAMPLE_INDEX[1]}

# Determine index length of run
indexread1count=$(grep IndexRead1 ${RUNDIR}/runParameters.xml | sed 's/<\/IndexRead1>\r//' | sed 's/    <IndexRead1>//')
indexread2count=$(grep IndexRead2 ${RUNDIR}/runParameters.xml | sed 's/<\/IndexRead2>\r//' | sed 's/    <IndexRead2>//')

# Determine Basemask
# http://stackoverflow.com/a/5349772/322188
I1n=$(head -c $(( ${indexread1count} - ${LEN_SAMPLE_INDEX1} )) < /dev/zero | tr '\0' 'n') # print 'n' n times
I1="I${LEN_SAMPLE_INDEX1}${I1n}"
I2=''

if [[ ${indexread2count} -gt 0 ]]; then # dual
    if [[ ${LEN_SAMPLE_INDEX2} -gt 0 ]]; then
        I2=",I${LEN_SAMPLE_INDEX2}"
    fi
    I2n=$(head -c $(( ${indexread2count} - ${LEN_SAMPLE_INDEX2} )) < /dev/zero | tr '\0' 'n') # print 'n' n times
    I2=",${I2}${I2n}"
fi

BASEMASK="Y151,${I1}${I2},Y151"

TILES_OPTS=''
for TILE in ${TILES[@]}; do
    TILES_OPTS="${TILES_OPTS} --tiles s_${LANE}_${TILE}"
done
log "start demultiplexing one lane ${LANE}, part ${TILES[@]}"
log "bcl2fastq -d 2 -r 4 -w 4 -p 14 ${TILES_OPTS} -R ${RUNDIR} -o ${TMPOUT_DIR} --barcode-mismatches 1 --use-bases-mask ${BASEMASK}"
     bcl2fastq -d 2 -r 4 -w 4 -p 14 ${TILES_OPTS} -R ${RUNDIR} -o ${TMPOUT_DIR} --barcode-mismatches 1 --use-bases-mask ${BASEMASK}

##########
# CP OUT #
##########

# first copy the lane-tile specific information
TILE_DIR=l${LANE}t${TILES[0]}/
OUTDIR_LT=${OUTDIR}/${TILE_DIR}/
log "starting copy output"
log "mkdir -p ${OUTDIR}"
mkdir -p ${OUTDIR}
log "mkdir -p ${OUTDIR_LT}"
mkdir -p ${OUTDIR_LT}
log "cp -R ${TMPOUT_DIR}/Reports ${TMPOUT_DIR}/Stats ${OUTDIR_LT}"
cp -R ${TMPOUT_DIR}/Reports ${TMPOUT_DIR}/Stats ${OUTDIR_LT}
log "cp ${INDIR}/SampleSheet.csv ${OUTDIR}/"
cp ${INDIR}/SampleSheet.csv ${OUTDIR}/

# second copy the actual fastq files
for PROJECT_ID in `ls ${TMPOUT_DIR}`; do
    if [[ ${PROJECT_ID} == 'Reports' || ${PROJECT_ID} == 'Stats' ]]; then
        continue
    fi
    if [[ ${PROJECT_ID} =~ ^Undetermined.* ]]; then
        continue
    fi

    # wait until other jobs finished copying ... yes yes, race condition
    while [[ $( ls -A ${CP_BACK_COMPLETE_DIR}) ]]; do
        sleep 10
    done
    touch ${CP_BACK_COMPLETE_DIR}/l${LANE}t${TILES[0]}

    # skip the zero sized fastq files
    for SAMPLE_ID in `ls ${TMPOUT_DIR}/${PROJECT_ID}`; do
        for FASTQ_FILE in `ls ${TMPOUT_DIR}/${PROJECT_ID}/${SAMPLE_ID}/`; do
            if [[ ! -s ${TMPOUT_DIR}/${PROJECT_ID}/${SAMPLE_ID}/${FASTQ_FILE} ]]; then
                continue
            fi

            SAMPLE_OUTDIR=${OUTDIR}/${TILE_DIR}/Project_${PROJECT_ID}/Sample_${SAMPLE_ID}
            log "mkdir -p ${SAMPLE_OUTDIR}"
            mkdir -p ${SAMPLE_OUTDIR}

            log "cp ${TMPOUT_DIR}/${PROJECT_ID}/${SAMPLE_ID}/${FASTQ_FILE} ${SAMPLE_OUTDIR}/${FASTQ_FILE}"
            cp ${TMPOUT_DIR}/${PROJECT_ID}/${SAMPLE_ID}/${FASTQ_FILE} ${SAMPLE_OUTDIR}/${FASTQ_FILE}

            # Copy the undetermined indexes
            # This works as we only expect one sample/lane! So no files get overwritten.
            # Make sure we only get the file listing and not the path/file
            for UNDETERMINED in $( ( cd ${TMPOUT_DIR}/ && ls Undetermined*) ); do
                # if Undetermined is not zero size and is not copied to $TMPOUT_DIR yet ...
                if [[ -s ${TMPOUT_DIR}/${UNDETERMINED} && ! -e ${SAMPLE_OUTDIR}/${UNDETERMINED} ]]; then
                    log "cp ${TMPOUT_DIR}/${UNDETERMINED} ${SAMPLE_OUTDIR}/${UNDETERMINED}"
                    cp ${TMPOUT_DIR}/${UNDETERMINED} ${SAMPLE_OUTDIR}/${UNDETERMINED}
                fi
            done
        done
    done

    # we're done copying, release the lock
    rm ${CP_BACK_COMPLETE_DIR}/l${LANE}t${TILES[0]}
done

log "Done copying output"

############
# CLEAN UP #
############

rm -r ${TMPDIR}/Xout/
rm -r ${TMPDIR}/*
rm -r ${CP_BACK_COMPLETE_DIR}
log "Done removing temp files"
